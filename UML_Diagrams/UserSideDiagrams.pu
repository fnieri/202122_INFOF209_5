@startuml UserSideDiagrams
title User Side Diagrams
skinparam ClassAttributeIconSize 0
skinparam Guillemet false
left to right direction


package MainMenu {

    class User {
        'Fields
            - username : string /' (Could also be guest so no username yet) '/
            - friendsList : vector of strings  /' (Could be empty if no friends. Story of my life :() '/
            - ELO : int
            - isLoggedIn : bool
        'Methods
            + << constructor >> User()
            + << constructor >> User(username : string) 
            + getUsername() : string
            + getFriendsList() : vector of Users
            + getElo() : int
            + logIn()
            + registerAccount()
            + logOut()
            + checkLeaderboard()
            + accesSettings()
            + addFriend(username : string)
            + removeFriend(username : string)
            + connectToChat() 
            + sendMessage(message : Message)
            + play(mod : string)
            + inviteFriendsToMatch()
            + joinFriendsMatch()
            + askToPauseMatch()
            + saveMatch()
            + loadMatch()
            + displayUser()
            
            

    }

        class ChatBox {
            'Fields
            - usersConnected : vector of Users
            - messagesLog : FILE    
        'Methods
            + receiveMessage(Message : message)
            + display(Message : message)

    }


    class Leaderboard {
        'Fields
            - listOfUsers : vector of Users
        'Methods
            + getUsers() : vector of Users
            + sortBy()
            + filterBy()
    }


}
note left of User
    default Constructor is for 
    guest access, Constructor only
    needs username to recognize him, as
    his data will be looked up in database on login.
    User class has no knowledge of his password.
end note
/'
package userAuth {


    class loginHandler {
        'Fields
            - username : string
            - password : string
        'Methods
            + processlogin() : bool
    }

    class registerHandler {
        'Fields
            - email : string
            - username : string
            - password : string
        'Methods
            + processRegister() : bool
    }

    class passwordEncrypter {
        'Fields
            - passwordToEncrypt : string
            - finalPassword : string
        'Methods
            +  << constructor >> passwordEncrypter(passwordToEncrypt : string)
            + hashingAlgorithm(password : string) : string 

    }


}
'/

class Message <<struct>> {
    'Fields
        - timeSent : Date
        - sender : User
        - sentMessage : string 
        - messageLenght : int
    }

/'
class Date <<struct>>{
    'Fields
        +hour : int
        +minute : int
        +second : int
        +year : int
        +month : int
        +day : int
}
'/

note top of Leaderboard
    Leaderboard can be sorted for all
    users or just friends
end note

ChatBox ---* "0..*" Message 
ChatBox "0..1" --- "2..*" User   : > contains
Leaderboard --- "*" User : > contains 
/'loginHandler --- passwordEncrypter : > uses
User -- loginHandler : > logs in via
User -- registerHandler : > registers via
registerHandler --- passwordEncrypter : > uses
'/
User --r-- Message : > can send

@enduml