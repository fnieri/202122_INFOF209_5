#pragma once

/**
 * @brief Password Encrypter using cryptopp::SHA256 to encrypt passwords
 * upon registering or logging in
 * @details The encrypter uses a salt key defined by the epoch time of the call
 * the password which will be hashed is a combination of the salt key and the 
 * password. The final digest will be the SHA256 digest, which will either brief
 * used to verify if the login was successful and to append an user with his password
 * and saltKey to the database
*/
#include <string>

class PasswordEncrypter
{
private:
    std::string passwordToEncrypt;
    std::string saltKey;
    /**
     * @brief Generate saltKey given Unix epoch time
     *
     */
    void generateSaltKey();
    /**
     * @brief Hash password given a saltkey
     *
     */
    std::string createDigest(std::string saltedPassword);

public:
    /**
     * @brief Constuctor for registering an account
     * with no given saltKey
     * Salt Key is generated upon constructor's call
     * @param passwordToEncrypt Password input by user
     */
      PasswordEncrypter(std::string passwordToEncrypt);

    /**
     *  @brief Constructor for decrypting given a salt key and a password to encrypt
     *  This constructor is used when an user logs in and a lookup in the database occurs
     *  The salt key is retrieved in the database and the vanilla password is hashed 
     *  to see if they both match
     *  @param passwordToEncrypt Password input by user
     *  @param saltKey saltKey retrieved in the database
     */  
       PasswordEncrypter(std::string passwordToEncrypt, std::string saltKey);

      /**
      * @brief Hash password given in constructor as salt key + password with SHA256
      * @see SHA256
      * @see Salt key
      * @see One-way encryption
      * @return string Hashed password 
      */
      std::string hashPassword();

      /**
      * @brief Get Salt Key generated by the saltKey generator
      */
      std::string getSaltKey();

      /**
      * @brief set SaltKey to newSaltKey
      * @param newSaltKey
      * @note Used solely in testing
      */
      void setSaltKey(std::string newSaltKey);
};
